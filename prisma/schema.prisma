// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Domains       Domain[]
    MailBoxes     MailBox[]
    Ssl           Ssl[]
    Admin         Boolean   @default(false)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Ssl {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    expiry    DateTime
    domains   Domain[]
    Owner     User     @relation(fields: [ownerId], references: [id])
    ownerId   String
    certPath  String
    keyPath   String
}

model Domain {
    id        String    @id @default(cuid())
    domain    String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Ssl       Ssl?      @relation(fields: [sslId], references: [id])
    sslId     String?
    mailBoxes MailBox[]
    Owner     User      @relation(fields: [ownerId], references: [id])
    ownerId   String
}

model MailBox {
    id            String   @id @default(cuid())
    // {username}@{domain}
    username      String   @unique
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    Domain        Domain   @relation(fields: [domainId], references: [id])
    domainId      String
    password_hash String
    Owner         User     @relation(fields: [ownerId], references: [id])
    ownerId       String
    isAlias       Boolean  @default(false)
    aliasTo       String?
}
